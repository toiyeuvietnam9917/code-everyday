// S·ª≠ d·ª•ng NodeJS ƒë·ªÉ l√†m 1 c√°i REST API ch·∫°y tr√™n port 8080 c·ªßa m√°y t√≠nh.
// n·∫°p th∆∞ vi·ªán express v√†o V√¨ Express kh√¥ng c√≥ s·∫µn trong NodeJS ‚Äî m√¨nh ph·∫£i ‚Äún·∫°p‚Äù n√≥ v√†o t·ª´ th∆∞ vi·ªán. Gi·ªëng nh∆∞: ‚Äú√ä Node ∆°i, cho tao d√πng Express nh√©.‚Äù
// Import th∆∞ vi·ªán express
const express = require('express'); // g·ªçi th∆∞ vi·ªán express
// kh·ªüi t·∫°o ·ª©ng d·ª•ng express D√≤ng n√†y kh·ªüi t·∫°o ·ª©ng d·ª•ng Express, t·ª©c l√† t·∫°o ra m·ªôt ‚Äúserver object‚Äù ‚Äî g·ªçi l√† app. Gi·ªëng nh∆∞: ‚ÄúTao ƒë√£ b·∫≠t c√°i web server l√™n r·ªìi ƒë√≥.‚Äù
const app = express(); // T·∫°o ·ª©ng d·ª•ng Express
// C·∫§U H√åNH MIDDLEWARE =====
// D√πng middleware n√†y ƒë·ªÉ server hi·ªÉu d·ªØ li·ªáu JSON g·ª≠i t·ª´ client (Postman, front-end)
app.use(express.json());

// ===================== K·∫æT N·ªêI MONGODB =====================
const mongoose = require('mongoose');
// require('mongoose') ‚Üí l√† ‚Äúg·ªçi th∆∞ vi·ªán‚Äù ƒë·ªÉ Node.js hi·ªÉu c√°ch l√†m vi·ªác v·ªõi MongoDB.

mongoose.connect('mongodb://127.0.0.1:27017/node_rest_demo')
    .then(() => console.log('‚úÖ Connected to MongoDB'))
    .catch(err => console.error('‚ùå MongoDB connection failed:', err));
//mongoose.connect(...) ‚Üí l√† ‚Äún·ªëi d√¢y ƒëi·ªán‚Äù gi·ªØa code  v√† database MongoDB tr√™n m√°y.
//node_rest_demo T√™n c·ªßa database (MongoDB t·ª± t·∫°o n·∫øu ch∆∞a c√≥)

// ===================== T·∫†O SCHEMA & MODEL =====================
// üß± 1. T·∫°o Schema (khu√¥n d·ªØ li·ªáu) - ƒê·ªãnh nghƒ©a c·∫•u tr√∫c d·ªØ li·ªáu b√†i vi·∫øt (post)
const postSchema = new mongoose.Schema({
    title: { type: String, required: true },    // b·∫Øt bu·ªôc c√≥ title (chu·ªói)
    content: { type: String, required: true }   // b·∫Øt bu·ªôc c√≥ content (chu·ªói)
}, { timestamps: true }); // t·ª± ƒë·ªông th√™m createdAt, updatedAt
// üü¢ Th√™m index cho title
postSchema.index({ title: 1 }); // 1 = s·∫Øp x·∫øp tƒÉng d·∫ßn (A ‚Üí Z). -1 = s·∫Øp x·∫øp gi·∫£m d·∫ßn (Z ‚Üí A).
//  ‚Äú√ä MongoDB, m√†y t·∫°o cho tao m·ªôt c√°i m·ª•c l·ª•c s·∫Øp x·∫øp theo title nh√© ‚Äî t·ª´ A ‚Üí Z.‚Äù
// 2. T·∫°o Model - ƒë·∫°i di·ªán cho collection "posts"
const Post = mongoose.model('Post', postSchema);
//T√™n Model n√™n vi·∫øt hoa ch·ªØ c√°i ƒë·∫ßu, v√¨ n√≥ l√† ‚Äúclass‚Äù (l·ªõp ƒë·ªëi t∆∞·ª£ng) ƒë·∫°i di·ªán cho 1 lo·∫°i d·ªØ li·ªáu.
//Post kh√¥ng ph·∫£i l√† 1 b√†i vi·∫øt duy nh·∫•t. N√≥ l√† ‚Äúkhu√¥n‚Äù ƒë·ªÉ t·∫°o ra nhi·ªÅu b√†i vi·∫øt. (gi·ªëng nh∆∞ class Student ‚Üí t·∫°o ra nhi·ªÅu student)
//mongoose.model(...) mongoose.model nghƒ©a l√†: ‚Äú√ä Mongoose, t·∫°o cho tao m·ªôt c√°i b·∫£ng (collection) m·ªõi trong MongoDB nh√©!‚Äù

// ===== USER MODEL =====
const userSchema = new mongoose.Schema({
    name: { type: String, required: true },
    email: { type: String, required: true, unique: true, lowercase: true, trim: true },
    password: { type: String, required: true, select: false }
}, { timestamps: true }); // t·ª± ƒë·ªông th√™m createdAt, updatedAt

const User = mongoose.model('User', userSchema);


const bcrypt = require('bcryptjs');  // d√πng ƒë·ªÉ bƒÉm (hash) m·∫≠t kh·∫©u
const SALT_ROUNDS = 12; //‚ÄúSALT_ROUNDS‚Äù l√† m·ª©c ƒë·ªô kh√≥ c·ªßa vi·ªác m√£ ho√°.

app.post('/registration', async (req, res) => {
    const { name, email, password } = req.body;

    // 400: thi·∫øu d·ªØ li·ªáu
    if (!name || !email || !password) {
        return res.status(400).json({ message: 'Thi·∫øu name, email ho·∫∑c password' });
    }

    try {
        // BƒÉm m·∫≠t kh·∫©u tr∆∞·ªõc khi l∆∞u
        const hash = await bcrypt.hash(password, SALT_ROUNDS);

        const user = await User.create({
            name,
            email,          // nh·ªõ set lowercase+trim trong schema
            password: hash  // l∆∞u HASH, kh√¥ng l∆∞u plaintext
        });

        // 201: Created
        return res.status(201).json({
            message: 'ƒêƒÉng k√Ω th√†nh c√¥ng',
            userId: user._id.toString(),
            name: user.name,
            email: user.email,
            createdAt: user.createdAt,
            updatedAt: user.updatedAt
        });

    } catch (err) {
        // 409: email tr√πng (do unique index)
        //11000 l√† m√£ l·ªói c·ªßa MongoDB √† vi ph·∫°m r√†ng bu·ªôc unique: b·∫°n 
        // ƒëang c·ªë ch√®n/kh·ªüi t·∫°o m·ªôt document c√≥ gi√° tr·ªã tr√πng v·ªõi m·ªôt document ƒë√£ c√≥ tr√™n tr∆∞·ªùng ƒë∆∞·ª£c ƒë√°nh unique
        if (err && err.code === 11000) {
            return res.status(409).json({ message: 'Email ƒë√£ t·ªìn t·∫°i' });
        }
        console.error(err); //In l·ªói ra console cho dev xem
        return res.status(500).json({ message: 'L·ªói server' });
    }
});

const jwt = require('jsonwebtoken');
const JWT_SECRET = 'my_secret_key_123';
const JWT_EXPIRES_IN = '1h'; // token t·ªìn t·∫°i 1 ti·∫øng

app.post('/login', async (req, res) => {
    const { email, password } = req.body;

    // 1) Thi·∫øu d·ªØ li·ªáu -> 400
    if (!email || !password) {
        return res.status(400).json({ message: 'Thi·∫øu email ho·∫∑c password' });
    }

    try {
        // 2) Chu·∫©n ho√° email gi·ªëng schema
        const normalizedEmail = email.trim().toLowerCase();

        // 3) T√¨m user theo email (NH·ªö b·∫≠t l·∫•y password v√¨ schema c√≥ select:false)
        //select('+password') r·∫•t quan tr·ªçng: v√¨ trong schema m√¨nh ·∫©n password, n√™n ph·∫£i xin l·∫•y ra ƒë·ªÉ so s√°nh.
        //T√¨m user theo email trong MongoDB.
        //findOne() l√† ph∆∞∆°ng th·ª©c (method) c·ªßa Mongoose Model. N√≥ d√πng ƒë·ªÉ t√¨m ra m·ªôt document (1 b·∫£n ghi) trong collection th·ªèa ƒëi·ªÅu ki·ªán.
        //T√¨m trong database xem c√≥ user n√†o c√≥ email tr√πng v·ªõi email m√† client g·ª≠i l√™n hay kh√¥ng.
        const user = await User.findOne({ email: normalizedEmail }).select('+password');

        // 4) Kh√¥ng th·∫•y user -> 401
        if (!user) {
            return res.status(401).json({ message: 'Sai email ho·∫∑c m·∫≠t kh·∫©u' });
        }

        // 5) So kh·ªõp password: so s√°nh password th√¥ v·ªõi hash trong DB
        const ok = await bcrypt.compare(password, user.password);
        //password: l√† m·∫≠t kh·∫©u ng∆∞·ªùi d√πng v·ª´a g√µ tr√™n form (d·∫°ng b√¨nh th∆∞·ªùng).
        //user.password: l√† m·∫≠t kh·∫©u d·∫°ng hash ƒëang l∆∞u trong database.
        //bcrypt.compare() t·ª± hash m·∫≠t kh·∫©u ng∆∞·ªùi d√πng nh·∫≠p, r·ªìi so s√°nh v·ªõi hash ƒë√£ l∆∞u.
        //bcrypt.compare() s·∫Ω so s√°nh 2 c√°i n√†y xem c√≥ kh·ªõp kh√¥ng (n√≥ s·∫Ω hash l·∫°i c√°i anh v·ª´a nh·∫≠p r·ªìi ƒë·ªëi chi·∫øu v·ªõi c√°i l∆∞u trong DB).
        if (!ok) {
            return res.status(401).json({ message: 'Sai email ho·∫∑c m·∫≠t kh·∫©u' });
        }


        // ‚úÖ N·∫øu password ƒë√∫ng ‚Üí t·∫°o JWT token
        const payload = {
            id: user._id.toString(),
            name: user.name,
            email: user.email
        };
        const token = jwt.sign(payload, JWT_SECRET, { expiresIn: JWT_EXPIRES_IN });
        //jwt.sign() H√†m c·ªßa th∆∞ vi·ªán jsonwebtoken ‚Äì d√πng ƒë·ªÉ ‚Äúk√Ω t√™n‚Äù t·∫°o ra token (th·∫ª x√°c nh·∫≠n).
        //payload L√† th√¥ng tin mu·ªën nh√©t v√†o token
        //JWT_SECRET L√† ch√¨a kh√≥a b√≠ m·∫≠t d√πng ƒë·ªÉ k√Ω token.‚Üí Ch·ªâ server bi·∫øt, gi√∫p ng∆∞·ªùi kh√°c kh√¥ng th·ªÉ gi·∫£ m·∫°o th·∫ª.
        //{ expiresIn: JWT_EXPIRES_IN } L√† th·ªùi h·∫°n s·ª≠ d·ª•ng token 

        // 6) Th√†nh c√¥ng -> 200 (KH√îNG tr·∫£ password/hash)
        return res.status(200).json({
            message: 'ƒêƒÉng nh·∫≠p th√†nh c√¥ng',
            token,
            user: {
                id: user._id.toString(),
                name: user.name,
                email: user.email,
                createdAt: user.createdAt,
                updatedAt: user.updatedAt
            }
        });

    } catch (err) {
        console.error('Login error:', err);
        return res.status(500).json({ message: 'L·ªói server' });
    }
});


// Khai b√°o d·ªØ li·ªáu d√πng chung (n·∫±m ngo√†i API)
let posts = [
    { id: "1", title: "B√†i 1", content: "Gi·ªõi thi·ªáu REST API" },
    { id: "2", title: "B√†i 2", content: "NodeJS c∆° b·∫£n" },
    { id: "3", title: "B√†i 3", content: "ExpressJS l√† g√¨" },
    { id: "4", title: "B√†i 4", content: "C√°ch d√πng Postman" },
    { id: "5", title: "B√†i 5", content: "JSON v√† HTTP" },
    { id: "6", title: "B√†i 6", content: "Routing trong Express" },
    { id: "7", title: "B√†i 7", content: "Middleware l√† g√¨" },
    { id: "8", title: "B√†i 8", content: "Error Handling c∆° b·∫£n" },
    { id: "9", title: "B√†i 9", content: "CRUD API v·ªõi NodeJS" },
    { id: "10", title: "B√†i 10", content: "T·ªïng k·∫øt REST API" }
];

// ƒë·ªãnh nghƒ©a 1 route (ƒë∆∞·ªùng d·∫´n) c∆° b·∫£n
// '/‚Äô nghƒ©a l√† ƒë∆∞·ªùng d·∫´n g·ªëc (trang ch·ªß). Khi ai ƒë√≥ truy c·∫≠p http://localhost:3001/, code trong ngo·∫∑c s·∫Ω ch·∫°y.
// (req, res) l√† request v√† response ‚Äî 2 ƒë·ªëi t∆∞·ª£ng quan tr·ªçng trong REST API. Gi·ªëng nh∆∞: ‚ÄúN·∫øu ai g√µ v√¥ trang ch·ªß th√¨ tr·∫£ l·ªùi h·ªç d√≤ng ‚ÄòServer ƒëang ch·∫°y ngon l√†nh!‚Äô nha.‚Äù

app.get('/', (req, res) => {
    res.send('Server ƒëang ch·∫°y ngon l√†nh!');
});

app.get('/hello-word', (req, res) => {
    // res.send("Oke");
    // res.json({ message: "Oke" });
    res.json([
        { id: 1, name: 'Tony' },
        { id: 2, name: 'Emi' },
        { id: 3, name: 'Peter' },
        { id: 4, name: 'Sophia' },
        { id: 5, name: 'David' },
        { id: 6, name: 'Chris' },
        { id: 7, name: 'Lily' },
        { id: 8, name: 'Olivia' },
        { id: 9, name: 'Noah' },
        { id: 10, name: 'Emma' }
    ]);

}
);

// GET / t√¨m ki·∫øm theo t√™n user
app.get('/search-users', (req, res) => {
    const { name = '' } = req.query;
    // req.query l√† object ch·ª©a c√°c tham s·ªë query string t·ª´ URL g·ª≠i l√™n. V√≠ d·ª• n·∫øu URL l√† /search-users?name=li th√¨ req.query s·∫Ω l√† { name: "li" }
    // C√∫ ph√°p { name = '' } = req.query g·ªçi l√† object destructuring trong JavaScript: l·∫•y thu·ªôc t√≠nh name t·ª´ req.query r·ªìi g√°n v√†o bi·∫øn name.
    // Ph·∫ßn = '' l√† gi√° tr·ªã m·∫∑c ƒë·ªãnh: n·∫øu req.query.name kh√¥ng t·ªìn t·∫°i ho·∫∑c undefined, th√¨ bi·∫øn name s·∫Ω ƒë∆∞·ª£c g√°n chu·ªói r·ªóng ''. 
    // V√≠ d·ª• n·∫øu URL l√† /search-users kh√¥ng c√≥ ?name=..., th√¨ name s·∫Ω l√† ''.
    // T√≥m l·∫°i: ‚ÄúL·∫•y tham s·ªë name t·ª´ query string n·∫øu c√≥, n·∫øu kh√¥ng c√≥ th√¨ ƒë·∫∑t name l√† r·ªóng.‚Äù
    const allUsers = [
        { id: 1, name: 'Tony' },
        { id: 2, name: 'Emi' },
        { id: 3, name: 'Peter' },
        { id: 4, name: 'Sophia' },
        { id: 5, name: 'David' },
        { id: 6, name: 'Chris' },
        { id: 7, name: 'Lily' },
        { id: 8, name: 'Olivia' },
        { id: 9, name: 'Noah' },
        { id: 10, name: 'Emma' }
    ];
    const keyword = name.trim().toLowerCase();
    //trim() ‚Üí lo·∫°i b·ªè kho·∫£ng tr·∫Øng ·ªü ƒë·∫ßu v√† cu·ªëi chu·ªói. V√≠ d·ª• " li " ‚Üí "li". W3Schools toLowerCase() ‚Üí chuy·ªÉn h·∫øt chu·ªói th√†nh ch·ªØ th∆∞·ªùng. V√≠ d·ª• "LiLy" ‚Üí "lily"
    //Ng∆∞·ªùi d√πng c√≥ th·ªÉ nh·∫≠p " Li " ho·∫∑c "LILY" ho·∫∑c "li" ‚Üí n·∫øu kh√¥ng chu·∫©n h√≥a th√¨ l·ªçc s·∫Ω kh√¥ng ƒë√∫ng.
    //Khi m√¨nh chuy·ªÉn th√†nh ch·ªØ th∆∞·ªùng v√† lo·∫°i b·ªè kho·∫£ng tr·∫Øng d∆∞ th·ª´a th√¨ so s√°nh s·∫Ω kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng (case-insensitive), gi√∫p t√¨m t√™n ch√≠nh x√°c h∆°n.
    const filtered = allUsers.filter(u => u.name.toLowerCase().includes(keyword));
    //filter() l√† ph∆∞∆°ng th·ª©c c·ªßa m·∫£ng trong JavaScript ‚Äî n√≥ s·∫Ω ch·∫°y qua t·ª´ng ph·∫ßn t·ª≠ trong m·∫£ng allUsers, v√† gi·ªØ l·∫°i nh·ªØng ph·∫ßn t·ª≠ th·ªèa ƒëi·ªÅu ki·ªán trong h√†m callback.
    // u => ƒê√¢y l√† arrow function (h√†m m≈©i t√™n): m·ªói ph·∫ßn t·ª≠ trong allUsers ƒë∆∞·ª£c g·ªçi l√† u. u ch√≠nh l√† t·ª´ng object user nh∆∞ { id:1, name:'Tony' }.
    // u.name.toLowerCase() -> L·∫•y thu·ªôc t√≠nh name c·ªßa user (u.name), r·ªìi chuy·ªÉn th√†nh ch·ªØ th∆∞·ªùng (toLowerCase()), ƒë·ªÉ vi·ªác so s√°nh kh√¥ng ph√¢n bi·ªát hoa-th∆∞·ªùng.
    //includes() l√† ph∆∞∆°ng th·ª©c c·ªßa chu·ªói khi u.name.toLowerCase() l√† m·ªôt chu·ªói; n√≥ ki·ªÉm tra xem chu·ªói ƒë√≥ c√≥ ch·ª©a keyword hay kh√¥ng. N·∫øu ch·ª©a ‚Üí tr·∫£ true, n·∫øu kh√¥ng ‚Üí tr·∫£ false.
    //K·∫øt qu·∫£ filter(...) Nh·ªØng ph·∫ßn t·ª≠ u m√† h√†m callback tr·∫£ true s·∫Ω ƒë∆∞·ª£c ƒë∆∞a v√†o m·∫£ng m·ªõi filtered. Nh·ªØng ph·∫ßn t·ª≠ tr·∫£ false th√¨ b·ªè qua 
    // ch·ªët l·∫°i : T·∫°o m·∫£ng m·ªõi filtered t·ª´ allUsers, gi·ªØ l·∫°i nh·ªØng user c√≥ t√™n (chuy·ªÉn th√†nh ch·ªØ th∆∞·ªùng) ch·ª©a t·ª´ kh√≥a keyword
    res.json({
        query: name,
        total: filtered.length,
        results: filtered
    });
    //res.json(...) ‚Üí g·ª≠i ph·∫£n h·ªìi d·∫°ng JSON t·ªõi client, v√† Express s·∫Ω ƒë·∫∑t ƒë√∫ng header Content-Type: application/json
    //B√™n trong json() l√† m·ªôt object c√≥ ba thu·ªôc t√≠nh:
    //query: name ‚Üí g·ª≠i l·∫°i cho client bi·∫øt t·ª´ kh√≥a t√¨m ki·∫øm m√† h·ªç ƒë√£ d√πng (name l√† gi√° tr·ªã query string).
    //total: filtered.length ‚Üí g·ª≠i s·ªë l∆∞·ª£ng ph·∫ßn t·ª≠ k·∫øt qu·∫£ t√¨m ƒë∆∞·ª£c (ƒë·ªô d√†i m·∫£ng filtered).
    //results: filtered ‚Üí m·∫£ng ch·ª©a c√°c user th·ªèa ƒëi·ªÅu ki·ªán t√¨m ki·∫øm.
    //.length l√† thu·ªôc t√≠nh (property) c·ªßa m·∫£ng ‚Äî n√≥ tr·∫£ v·ªÅ m·ªôt s·ªë (integer) cho bi·∫øt m·∫£ng ƒëang c√≥ bao nhi√™u ph·∫ßn t·ª≠. 
});

// // Th√™m 1 c√°i api GET /posts tr·∫£ v·ªÅ 1 m·∫£ng c√°c post d∆∞·ªõi d·∫°ng {id: string, title: string, content:"string"}
// app.get('/posts', (req, res) => {
//     const posts = [
//         { id: "1", title: "B√†i h·ªçc ƒë·∫ßu ti√™n", content: "B√†i n√†y h·ªçc v·ªÅ REST API" },
//         { id: "2", title: "H∆∞·ªõng d·∫´n API REST", content: "H∆∞·ªõng d·∫´n c√°ch d·ª±ng API REST v·ªõi NodeJS" },
//         { id: "3", title: "M·∫πo JavaScript", content: "M·ªôt s·ªë m·∫πo nh·ªè khi d√πng JavaScript hi·ªáu qu·∫£." }
//     ];
//     res.json(posts);
// });

// L·∫§Y DANH S√ÅCH B√ÄI VI·∫æT (GET /posts) v√† ph√¢n trang - getAllPost and pagination
// Th·ª≠ t·∫°o index tr√™n c√°i title c·ªßa Post. Sau ƒë√≥ th√¨ update c√°i API GET /posts ƒë·ªÉ h·ªó tr·ª£ t√¨m (search) posts theo title.
app.get('/posts', async (req, res) => {
    try {
        //1Ô∏è‚É£ ƒê·ªçc tham s·ªë ?page & ?limit t·ª´ query, √©p s·ªë v√† ch·∫∑n min = 1
        const page = Math.max(parseInt(req.query.page) || 1, 1);
        const limit = Math.max(parseInt(req.query.limit) || 5, 1);

        //2Ô∏è‚É£ ƒê·ªçc th√™m tham s·ªë ?search (n·∫øu ng∆∞·ªùi d√πng mu·ªën t√¨m theo title)
        // req.query l√† object ch·ª©a c√°c tham s·ªë query string t·ª´ URL g·ª≠i l√™n
        //"T·∫°o bi·∫øn search v√† g√°n gi√° tr·ªã req.query.search cho n√≥."
        const { search } = req.query;

        //3Ô∏è‚É£ T·∫°o ƒëi·ªÅu ki·ªán l·ªçc
        // N·∫øu c√≥ ?search th√¨ filter theo title (t√¨m g·∫ßn ƒë√∫ng, kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng)
        let filter = {};
        if (search) {
            filter = { title: { $regex: search, $options: 'i' } };
            //filter = { title: { ... } } nghƒ©a l√†: T·∫°o ƒëi·ªÅu ki·ªán l·ªçc cho MongoDB: ‚ÄúT√¥i ch·ªâ mu·ªën t√¨m nh·ªØng b√†i vi·∫øt c√≥ title gi·ªëng v·ªõi t·ª´ kh√≥a ng∆∞·ªùi nh·∫≠p.‚Äù
            //$regex: l√† ‚Äúregular expression‚Äù ‚Äî cho ph√©p t√¨m g·∫ßn ƒë√∫ng. ‚Üí N·∫øu search = "api" ‚Üí Th√¨ s·∫Ω t√¨m ƒë∆∞·ª£c "REST API", "api c∆° b·∫£n", "h·ªçc Api n√¢ng cao"...
            //$options: 'i': nghƒ©a l√† kh√¥ng ph√¢n bi·ªát ch·ªØ hoa hay th∆∞·ªùng ‚Üí "API", "api", "Api" ƒë·ªÅu ƒë∆∞·ª£c coi l√† gi·ªëng nhau.
            //N·∫øu c√≥ t·ª´ kh√≥a search ‚Üí ch·ªâ t√¨m b√†i c√≥ title ch·ª©a t·ª´ ƒë√≥. N·∫øu kh√¥ng c√≥ ‚Üí l·∫•y t·∫•t c·∫£ b√†i.
            //{ title: { $regex: search, $options: 'i' } }
            //ƒê√¢y l√† m·ªôt object l·ªìng nhau (nested object) { <t√™n_tr∆∞·ªùng>: { <to√°n_t·ª≠_truy_v·∫•n>: <gi√°_tr·ªã> } }
            // <t√™n_tr∆∞·ªùng> = title <to√°n_t·ª≠_truy_v·∫•n> = $regex <gi√°_tr·ªã> = search
            // v√≠ d·ª• search = ap -> T√¨m t·∫•t c·∫£ c√°c document m√† tr∆∞·ªùng title c√≥ ch·ª©a ch·ªØ api (kh√¥ng ph√¢n bi·ªát hoa th∆∞·ªùng).
        };

        // 4Ô∏è‚É£ ƒê·∫øm t·ªïng s·ªë b√†i vi·∫øt (ph√π h·ª£p v·ªõi ƒëi·ªÅu ki·ªán filter)
        const total = await Post.countDocuments(filter);
        //.countDocuments() ‚Üí l√† method (h√†m c√≥ s·∫µn c·ªßa Mongoose) d√πng ƒë·ªÉ ƒë·∫øm s·ªë l∆∞·ª£ng document (b·∫£n ghi) hi·ªán c√≥ trong collection.
        //await ‚Üí l√† t·ª´ kh√≥a c·ªßa JavaScript, nghƒ©a l√† ‚Äúch·ªù MongoDB ƒë·∫øm xong r·ªìi m·ªõi g√°n gi√° tr·ªã cho total‚Äù.
        //ƒêo·∫°n n√†y l·∫•y t·ªïng s·ªë b√†i vi·∫øt hi·ªán c√≥ trong DB, g√°n v√†o bi·∫øn total.

        //totalPages l√† t·ªïng s·ªë trang c·∫ßn c√≥, ƒë·∫£m b·∫£o ‚â• 1.
        const totalPages = Math.max(Math.ceil(total / limit), 1);
        //Math	ƒê·ªëi t∆∞·ª£ng c√≥ s·∫µn trong JavaScript	Ch·ª©a c√°c h√†m to√°n h·ªçc ti·ªán d·ª•ng. .ceil()	
        // Method c·ªßa Math	L√†m tr√≤n l√™n ƒë·∫øn s·ªë nguy√™n g·∫ßn nh·∫•t. 
        // .max()	Method c·ªßa Math	Ch·ªçn gi√° tr·ªã l·ªõn nh·∫•t gi·ªØa c√°c s·ªë truy·ªÅn v√†o.


        //5Ô∏è‚É£ T√≠nh v·ªã tr√≠ b·ªè qua (skip) r·ªìi l·∫•y d·ªØ li·ªáu theo trang
        const skip = (page - 1) * limit;
        //(page - 1)	C√¥ng th·ª©c to√°n h·ªçc	T√≠nh xem ƒëang ·ªü trang s·ªë m·∫•y.->(page ‚àí 1) = s·ªë trang c·∫ßn b·ªè qua tr∆∞·ªõc khi hi·ªÉn th·ªã trang hi·ªán t·∫°i.
        // limit	Ph√©p nh√¢n trong JS	M·ªói trang c√≥ bao nhi√™u b√†i.
        //skip	Bi·∫øn	L∆∞u s·ªë l∆∞·ª£ng b√†i c·∫ßn b·ªè qua.

        const posts = await Post.find(filter)
            //Post l√† model ƒë·∫°i di·ªán cho collection posts.\
            //.find() l√† h√†m c·ªßa Mongoose ƒë·ªÉ t√¨m c√°c document (nhi·ªÅu d√≤ng) trong MongoDB.
            .sort({ createdAt: -1 }) // m·ªõi nh·∫•t l√™n ƒë·∫ßu
            .skip(skip) //‚Üí b·ªè qua m·ªôt s·ªë d√≤ng ƒë·∫ßu (cho ph√¢n trang) .find() l√† h√†m c·ªßa Mongoose ƒë·ªÉ t√¨m c√°c document (nhi·ªÅu d√≤ng) trong MongoDB.
            .limit(limit); //‚Üí ch·ªâ l·∫•y m·ªôt s·ªë l∆∞·ª£ng gi·ªõi h·∫°n (v√≠ d·ª• 5 b√†i/trang)

        // 4) Tr·∫£ k·∫øt qu·∫£ + metadata ph√¢n trang
        res.json({
            page,
            limit,
            total,
            totalPages,
            hasPrev: page > 1,
            hasNext: page < totalPages,
            results: posts
        });
    } catch (err) {
        console.error(err);
        res.status(500).json({ error: 'L·ªói server khi l·∫•y danh s√°ch b√†i vi·∫øt' });
    }
});


// API GET /posts - ph√¢n trang
// app.get('/posts', (req, res) => {
//     const page = Math.max(parseInt(req.query.page) || 1, 1);

//     //Math l√† ƒë·ªëi t∆∞·ª£ng (object) c√≥ s·∫µn trong JavaScript. N√≥ ch·ª©a nhi·ªÅu h√†m (method) ƒë·ªÉ l√†m vi·ªác v·ªõi to√°n h·ªçc: nh∆∞ Math.max(), Math.min(), Math.round(), Math.random(), Math.floor()
//     //Trong d√≤ng n√†y, m√¨nh d√πng Math.max() ƒë·ªÉ ch·ªçn gi√° tr·ªã l·ªõn h∆°n gi·ªØa hai s·ªë (ƒë·∫£m b·∫£o kh√¥ng b·ªã √¢m ho·∫∑c 0).
//     //Math.max(5, 1) // ‚Üí 5 Math.max(-3, 1) // ‚Üí 1
//     //parseInt() l√† h√†m c√≥ s·∫µn c·ªßa JavaScript, d√πng ƒë·ªÉ chuy·ªÉn chu·ªói (string) sang s·ªë nguy√™n (integer)
//     //req l√† vi·∫øt t·∫Øt c·ªßa request ‚Äî ƒë·ªëi t∆∞·ª£ng m√† ExpressJS t·∫°o ra ƒë·ªÉ ch·ª©a d·ªØ li·ªáu client g·ª≠i l√™n. .
//     //query l√† n∆°i Express l∆∞u c√°c tham s·ªë n·∫±m sau d·∫•u ‚Äú?‚Äù trong URL. .page l√† t√™n c·ªßa key trong query string.
//     //parseInt(req.query.page) || 1  N·∫øu req.query.page kh√¥ng c√≥ ho·∫∑c kh√¥ng h·ª£p l·ªá ‚Üí d√πng gi√° tr·ªã m·∫∑c ƒë·ªãnh l√† 1.
//     //L·∫•y page t·ª´ query string (req.query.page). Chuy·ªÉn n√≥ t·ª´ chu·ªói sang s·ªë (parseInt). 
//     // N·∫øu ng∆∞·ªùi d√πng kh√¥ng g·ª≠i ho·∫∑c nh·∫≠p linh tinh ‚Üí m·∫∑c ƒë·ªãnh l√† 1. D√πng Math.max(..., 1) ƒë·ªÉ ƒë·∫£m b·∫£o kh√¥ng bao gi·ªù nh·ªè h∆°n 1.

//     const limit = Math.max(parseInt(req.query.limit) || 3, 1);

//     //H√£y ƒë·ªçc s·ªë trang (page) v√† s·ªë l∆∞·ª£ng b√†i vi·∫øt m·ªói trang (limit) t·ª´ ƒë∆∞·ªùng d·∫´n URL m√† ng∆∞·ªùi d√πng g·ª≠i l√™n. 
//     // N·∫øu h·ªç kh√¥ng g·ª≠i, ho·∫∑c g·ª≠i sai, th√¨ d√πng gi√° tr·ªã m·∫∑c ƒë·ªãnh l√† 1 v√† 3.

//     const total = posts.length;
//     const totalPages = Math.ceil(total / limit);

//     //total / limit: chia t·ªïng s·ªë b√†i vi·∫øt cho s·ªë b√†i m·ªói trang ‚Üí ƒë·ªÉ bi·∫øt c√≥ bao nhi√™u trang.
//     //Math.ceil() l√† h√†m l√†m tr√≤n l√™n(c·ªßa ƒë·ªëi t∆∞·ª£ng Math)   Math.ceil(3.2) // ‚Üí 4

//     const start = (page - 1) * limit;
//     const end = start + limit;

//     const data = posts.slice(start, end);
//     // .slice(start, end) l√† h√†m c·∫Øt m·∫£ng trong JavaScript.
//     //N√≥ tr·∫£ v·ªÅ m·ªôt m·∫£ng m·ªõi ch·ª©a c√°c ph·∫ßn t·ª≠ t·ª´ start ‚Üí end - 1. v√¨ n√≥ l·∫•y theo ph·∫ßn th·ª≠ index
//     res.json({
//         page, // t·ª± hi·ªÉu l√† page: page
//         limit, // t·ª± hi·ªÉu l√† limit: limit
//         total, // t·ª± hi·ªÉu l√† total: total
//         totalPages, // t·ª± hi·ªÉu l√† totalPages: totalPages
//         hasPrev: page > 1,
//         hasNext: page < totalPages,
//         results: data
//     });
// });


// Th√™m 1 c√°i api GET /posts/{id} t√¨m v√† ch·ªâ tr·∫£ v·ªÅ 1 post duy nh·∫•t sau khi t√¨m ki·∫øm trong c√°i m·∫£ng m√¨nh c√≥ ·ªü tr√™n.
// GET /posts/:id - tr·∫£ v·ªÅ 1 b√†i vi·∫øt
app.get('/posts/:id', (req, res) => {
    const { id } = req.params;
    // req.params l√† m·ªôt object ch·ª©a t·∫•t c·∫£ c√°c tham s·ªë route (route parameters) ƒë∆∞·ª£c khai b√°o v·ªõi : trong ƒë∆∞·ªùng d·∫´n.
    // C√∫ ph√°p { id } = req.params s·ª≠ d·ª•ng destructuring ƒë·ªÉ l·∫•y bi·∫øn id t·ª´ req.params.
    // const params = req.params; const id = params.id;
    // const posts = [
    //     { id: "1", title: "B√†i h·ªçc ƒë·∫ßu ti√™n", content: "B√†i n√†y h·ªçc v·ªÅ REST API" },
    //     { id: "2", title: "H∆∞·ªõng d·∫´n API REST", content: "H∆∞·ªõng d·∫´n c√°ch d·ª±ng API REST v·ªõi NodeJS" },
    //     { id: "3", title: "M·∫πo JavaScript", content: "M·ªôt s·ªë m·∫πo nh·ªè khi d√πng JavaScript hi·ªáu qu·∫£." }
    // ];
    const post = posts.find(p => p.id === id); //D√πng ph∆∞∆°ng th·ª©c .find() c·ªßa m·∫£ng ƒë·ªÉ t√¨m ph·∫ßn t·ª≠ m√† p.id === id.
    //N·∫øu c√≥ b√†i vi·∫øt c√≥ id tr√πng v·ªõi id ƒë∆∞·ª£c truy·ªÅn ‚Äî th√¨ post s·∫Ω l√† object ƒë√≥; n·∫øu kh√¥ng th√¨ post s·∫Ω l√† undefined.
    if (post) {
        return res.json(post);
    }
    return res.status(404).json({ error: "Post not found", id: id });
});


// ===== B∆Ø·ªöC 3: ƒê·ªäNH NGHƒ®A C√ÅC API (ROUTES) =====
// (1) GET - L·∫•y danh s√°ch user
// app.get('/users', (req, res) => {
//     res.json([
//         { id: 1, name: 'Tony' },
//         { id: 2, name: 'Emi' }
//     ]);
// });

// ===================== T·∫†O B√ÄI VI·∫æT (POST /posts) =====================
app.post('/posts', async (req, res) => {  //async: cho ph√©p d√πng t·ª´ kh√≥a await b√™n trong (ƒë·ªÉ ‚Äúch·ªù‚Äù database l√†m xong).
    const { title, content } = req.body; // l·∫•y d·ªØ li·ªáu t·ª´ client g·ª≠i l√™n
    //{ title, content } = req.body l√† b√≥c t√°ch: t·∫°o 2 bi·∫øn title v√† content t·ª´ req.body. (gi·ªëng: const title = req.body.title; const content = req.body.content;)
    // ‚úÖ Ki·ªÉm tra d·ªØ li·ªáu c√≥ ƒë·ªß kh√¥ng
    //if (!title || !content): n·∫øu thi·∫øu title ho·∫∑c content ‚Üí b√°o l·ªói ngay.
    //res.status(400): tr·∫£ m√£ l·ªói 400 (ng∆∞·ªùi d√πng g·ª≠i sai d·ªØ li·ªáu).
    //.json({...}): g·ª≠i ph·∫£n h·ªìi d·∫°ng JSON v·ªÅ cho ng∆∞·ªùi d√πng.
    if (!title || !content) {
        //return: d·ª´ng lu√¥n ·ªü ƒë√¢y, kh√¥ng ch·∫°y ti·∫øp n·ªØa (tr√°nh l·ª° tay l∆∞u d·ªØ li·ªáu sai).
        return res.status(400).json({
            error: "Bad Request",
            message: "title v√† content l√† b·∫Øt bu·ªôc"
        });
    }

    //B·∫Øt ƒë·∫ßu kh·ªëi th·ª≠. N·∫øu c√≥ l·ªói x·∫£y ra ·ªü b√™n trong, s·∫Ω nh·∫£y xu·ªëng catch.
    try {
        // ‚úÖ L∆∞u b√†i vi·∫øt m·ªõi v√†o MongoDB
        const newPost = await Post.create({ title, content });
        //Post l√† Model (c√°i ‚Äúkhu√¥n‚Äù ƒë·ªÉ l√†m vi·ªác v·ªõi collection posts trong MongoDB).
        //.create({ title, content }): t·∫°o m·ªõi 1 document (b·∫£n ghi) trong MongoDB v·ªõi 2 tr∆∞·ªùng title, content.
        //await: ch·ªù MongoDB l∆∞u xong r·ªìi m·ªõi g√°n k·∫øt qu·∫£ v√†o newPost.
        //newPost s·∫Ω l√† ƒë·ªëi t∆∞·ª£ng v·ª´a ƒë∆∞·ª£c l∆∞u, c√≥ c·∫£ _id, createdAt, updatedAt‚Ä¶
        // ‚úÖ Tr·∫£ ph·∫£n h·ªìi cho client
        res.status(201).json({
            message: "ƒê√£ th√™m b√†i vi·∫øt m·ªõi!",
            post: newPost //ch√≠nh l√† d·ªØ li·ªáu v·ª´a l∆∞u (ƒë·ªÉ ng∆∞·ªùi d√πng bi·∫øt MongoDB ƒë√£ ghi g√¨).
        });
    } catch (err) {
        console.error(err);
        res.status(500).json({
            error: "L·ªói server",
            message: "Kh√¥ng th·ªÉ t·∫°o b√†i vi·∫øt"
        });
    }
});

// // POST /posts - Th√™m b√†i vi·∫øt m·ªõi
// app.post('/posts', (req, res) => {
//     const { title, content } = req.body;
//     if (!title || !content) {
//         return res.status(400).json({
//             error: "Bad Request",
//             message: "title v√† content l√† b·∫Øt bu·ªôc"
//         });
//     }

//     // const posts = [
//     //     { id: "1", title: "B√†i h·ªçc ƒë·∫ßu ti√™n", content: "B√†i n√†y h·ªçc v·ªÅ REST API" },
//     //     { id: "2", title: "H∆∞·ªõng d·∫´n API REST", content: "H∆∞·ªõng d·∫´n c√°ch d·ª±ng API REST v·ªõi NodeJS" },
//     //     { id: "3", title: "M·∫πo JavaScript", content: "M·ªôt s·ªë m·∫πo nh·ªè khi d√πng JavaScript hi·ªáu qu·∫£." }
//     // ];

//     // T·∫°o id m·ªõi ‚Äî c√°ch n√†y l√† l·∫•y max + 1
//     const newId = (posts.length + 1).toString();
//     //posts.length -> L·∫•y s·ªë ph·∫ßn t·ª≠ trong m·∫£ng + th√™m 1 v√† chuy·ªÉn n√≥ sang string v√¨ id c√≥ ki·ªÉu string
//     const newPost = { id: newId, title, content };
//     posts.push(newPost);

//     // Tr·∫£ v·ªÅ 201 Created v√† b√†i vi·∫øt m·ªõi
//     return res.status(201).json(newPost);

//     //   res.status(201).json({
//     //     message: "T·∫°o b√†i vi·∫øt th√†nh c√¥ng",
//     //     post: newPost,
//     //     location: `/posts/${newId}`
//     //   });

// });

// // (2) POST - Th√™m user m·ªõi
app.post('/users', (req, res) => {
    // const newUser = req.body; // L·∫•y d·ªØ li·ªáu user t·ª´ ph·∫ßn body c·ªßa request
    const { id, name } = req.body; // L·∫•y d·ªØ li·ªáu t·ª´ client g·ª≠i l√™n // t∆∞∆°ng ƒë∆∞∆°ng v·ªõi const id = req.body.id; const name = req.body.name;.
    //N√≥ c√≥ nghƒ©a l√†: l·∫•y ra 2 thu·ªôc t√≠nh id v√† name t·ª´ object req.body r·ªìi g√°n ch√∫ng v√†o 2 bi·∫øn c√πng t√™n.//
    //ƒë√¢y l√† c√∫ ph√°p destructuring trong JavaScript. N√≥ khai b√°o hai bi·∫øn id v√† name c√πng l√∫c, b·∫±ng c√°ch b√≥c t√°ch gi√° tr·ªã c·ªßa c√°c thu·ªôc t√≠nh id v√† name t·ª´ object req.body.‚Äù

    // Tr·∫£ v·ªÅ 400 n·∫øu d·ªØ li·ªáu sai ho·∫∑c thi·∫øu
    //typeof l√† to√°n t·ª≠ trong JavaScript, d√πng ƒë·ªÉ ki·ªÉm tra ki·ªÉu d·ªØ li·ªáu c·ªßa m·ªôt bi·∫øn.
    // ·ªû ƒë√¢y typeof id s·∫Ω tr·∫£ v·ªÅ ki·ªÉu d·ªØ li·ªáu c·ªßa id. R·ªìi ta so s√°nh v·ªõi 'number'
    // D·∫•u !== nghƒ©a l√† kh√°c c·∫£ v·ªÅ gi√° tr·ªã v√† ki·ªÉu d·ªØ li·ªáu (so s√°nh nghi√™m ng·∫∑t). ‚ÄúN·∫øu id kh√¥ng ph·∫£i ki·ªÉu s·ªë th√¨ ƒëi·ªÅu ki·ªán n√†y ƒë√∫ng.‚Äù
    // D·∫•u || l√† to√°n t·ª≠ logic OR (ho·∫∑c). N·∫øu m·ªôt trong hai ƒëi·ªÅu ki·ªán ƒë√∫ng, th√¨ to√†n b·ªô if ƒë√∫ng. Ch·ªâ khi c·∫£ hai ƒëi·ªÅu ki·ªán ƒë·ªÅu sai, if m·ªõi sai.
    // D·∫•u !name ƒë√£ bao g·ªìm c·∫£ tr∆∞·ªùng h·ª£p name == "", undefined, ho·∫∑c null r·ªìi.
    if (typeof id !== 'number' || !name) {
        return res.status(400).json({
            error: 'Bad Request',
            message: 'Thi·∫øu id ho·∫∑c name kh√¥ng h·ª£p l·ªá'
        });
    }
    // N·∫øu d·ªØ li·ªáu h·ª£p l·ªá, tr·∫£ v·ªÅ 201 nh∆∞ b√¨nh th∆∞·ªùng
    res.status(201).json({
        message: 'ƒê√£ th√™m user m·ªõi!',
        // user: newUser
        user: { id, name }
    });
});

// // (3) PUT - C·∫≠p nh·∫≠t th√¥ng tin user
// app.put('/users/:id', (req, res) => {
//     const id = req.params.id; // L·∫•y id t·ª´ ƒë∆∞·ªùng d·∫´n /users/:id
//     const updatedUser = req.body;
//     res.json({
//         message: `ƒê√£ c·∫≠p nh·∫≠t user c√≥ ID = ${id}`,
//         user: updatedUser
//     });
// });

// PUT /posts/:id - C·∫≠p nh·∫≠t b√†i vi·∫øt g·ª≠i l√™n {title: string, content: string} 
app.put('/posts/:id', (req, res) => {
    const { id } = req.params;            // L·∫•y gi√° tr·ªã id t·ª´ ƒë∆∞·ªùng d·∫´n URL, v√≠ d·ª• /posts/2.
    const { title, content } = req.body;  // L·∫•y d·ªØ li·ªáu m·ªõi t·ª´ body request (title, content) ( t·ª´ client g·ª≠i l√™n)

    // ‚úÖ Ki·ªÉm tra d·ªØ li·ªáu g·ª≠i l√™n   // 1) Validate s·ªõm ‚Äì c·∫Øt r√°c tr∆∞·ªõc khi ch·∫°m d·ªØ li·ªáu
    if (!title || !content) {
        return res.status(400).json({
            error: "Thi·∫øu d·ªØ li·ªáu",
            message: "title v√† content l√† b·∫Øt bu·ªôc"
        });
    }

    // ‚úÖ T√¨m b√†i vi·∫øt theo id
    const index = posts.findIndex(p => p.id === id);
    // findIndex() s·∫Ω duy·ªát m·∫£ng t·ª´ ƒë·∫ßu ƒë·∫øn cu·ªëi. T√¨m v·ªã tr√≠ b√†i vi·∫øt c·∫ßn s·ª≠a trong m·∫£ng. N·∫øu kh√¥ng th·∫•y ‚Üí tr·∫£ l·ªói 404.
    //D√≤ng n√†y c√≥ nhi·ªám v·ª• t√¨m xem b√†i vi·∫øt n√†o trong m·∫£ng posts c√≥ id tr√πng v·ªõi id m√† client g·ª≠i l√™n (qua URL), v√† l·∫•y v·ªã tr√≠ (index) c·ªßa b√†i vi·∫øt ƒë√≥ trong m·∫£ng.

    if (index === -1) {
        return res.status(404).json({
            error: "Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt",
            id: id
        });
    }

    // ‚úÖ C·∫≠p nh·∫≠t b√†i vi·∫øt 
    // Kh√¥ng ph·∫£i l√† khai b√°o l·∫°i. ‚úÖ M√† ch·ªâ l√† thay ƒë·ªïi ph·∫ßn t·ª≠ b√™n trong m·∫£ng hi·ªán c√≥.
    //c·∫≠p nh·∫≠t (thay ƒë·ªïi) b√†i vi·∫øt c≈© trong m·∫£ng posts ‚Üí b·∫±ng c√°ch gi·ªØ nguy√™n c√°c thu·ªôc t√≠nh c≈©, v√† ghi ƒë√® l·∫°i c√°c thu·ªôc t√≠nh m·ªõi (title, content) m√† client g·ª≠i l√™n.
    //posts[index] L√† ph·∫ßn t·ª≠ c·∫ßn c·∫≠p nh·∫≠t trong m·∫£ng.
    //√ù nghƒ©a t·ªïng th·ªÉ: T·∫°o ra m·ªôt object m·ªõi, sao ch√©p to√†n b·ªô d·ªØ li·ªáu c≈© t·ª´ posts[index], r·ªìi ghi ƒë√® l·∫°i hai tr∆∞·ªùng title v√† content b·∫±ng gi√° tr·ªã m·ªõi (client g·ª≠i l√™n).
    // ...posts[index] = copy to√†n b·ªô c√°c c·∫∑p key‚Äìvalue c·ªßa b√†i vi·∫øt c≈©
    // posts[index] = { id: "2", title: "C≈©", content: "C≈©" }; -> ...posts[index] t∆∞∆°ng ƒë∆∞∆°ng v·ªõi: id: "2", title: "C≈©", content: "C≈©"
    posts[index] = { ...posts[index], title, content };

    // ‚úÖ Tr·∫£ v·ªÅ k·∫øt qu·∫£
    res.status(200).json({
        message1: "C·∫≠p nh·∫≠t b√†i vi·∫øt th√†nh c√¥ng",
        post: posts[index]
    });
});


// (4) DELETE - X√≥a user
// app.delete('/users/:id', (req, res) => {
//     const id = req.params.id;
//     res.json({ message: `ƒê√£ x√≥a user c√≥ ID = ${id}` });
// });


// DELETE /posts/:id - X√≥a b√†i vi·∫øt
app.delete('/posts/:id', (req, res) => {
    const { id } = req.params;

    // ‚úÖ M·∫£ng d·ªØ li·ªáu gi·∫£ l·∫≠p
    // let posts = [
    //     { id: "1", title: "B√†i h·ªçc ƒë·∫ßu ti√™n", content: "B√†i n√†y h·ªçc v·ªÅ REST API" },
    //     { id: "2", title: "H∆∞·ªõng d·∫´n API REST", content: "C√°ch d·ª±ng API REST v·ªõi NodeJS" },
    //     { id: "3", title: "M·∫πo JavaScript", content: "M·ªôt s·ªë m·∫πo nh·ªè khi d√πng JavaScript hi·ªáu qu·∫£." }
    // ];

    // ‚úÖ T√¨m v·ªã tr√≠ b√†i vi·∫øt theo id
    const index = posts.findIndex(p => p.id === id);

    // ‚ùå N·∫øu kh√¥ng t√¨m th·∫•y th√¨ tr·∫£ v·ªÅ l·ªói 404
    if (index === -1) {
        return res.status(404).json({
            error: "Kh√¥ng t√¨m th·∫•y b√†i vi·∫øt c·∫ßn x√≥a",
            id: id
        });
    }

    // ‚úÖ X√≥a b√†i vi·∫øt b·∫±ng splice()  c√∫ ph√°p array.splice(start, deleteCount)    array.splice(v·ªã_tr√≠_b·∫Øt_ƒë·∫ßu, s·ªë_l∆∞·ª£ng_c·∫ßn_x√≥a, ...ph·∫ßn_t·ª≠_m·ªõi)
    //start	V·ªã tr√≠ b·∫Øt ƒë·∫ßu x√≥a ho·∫∑c th√™m (ƒë·∫øm t·ª´ 0). deleteCount	S·ªë l∆∞·ª£ng ph·∫ßn t·ª≠ c·∫ßn x√≥a k·ªÉ t·ª´ v·ªã tr√≠ start.
    const deletedPost = posts.splice(index, 1)[0]; // l·∫•y ra ph·∫ßn t·ª≠ b·ªã x√≥a
    //[0] ‚Üí l·∫•y ph·∫ßn t·ª≠ ƒë·∫ßu ti√™n trong m·∫£ng ƒë√≥
    //N·∫øu b·ªè [0] th√¨ v·∫´n ho·∫°t ƒë·ªông, nh∆∞ng khi g·ª≠i v·ªÅ cho client, s·∫Ω nh·∫≠n ƒë∆∞·ª£c m·∫£ng, kh√¥ng ph·∫£i object.
    //‚ÄúX√≥a b√†i vi·∫øt ·ªü v·ªã tr√≠ index kh·ªèi m·∫£ng, v√† l∆∞u b√†i vi·∫øt v·ª´a b·ªã x√≥a v√†o bi·∫øn deletedPost.‚Äù

    // ‚úÖ Tr·∫£ v·ªÅ ph·∫£n h·ªìi
    res.status(200).json({
        message: "ƒê√£ x√≥a b√†i vi·∫øt th√†nh c√¥ng",
        deleted: deletedPost
    });
});



// ch·ªçn c·ªïng server ch·∫°y (v√≠ d·ª• c·ªïng 8080 )/  b·∫Øt bu·ªôc ph·∫£i c√≥ 1 c·ªïng ƒë·ªÉ server bi·∫øt ‚Äúng·ªìi ·ªü ƒë√¢u‚Äù.
const PORT = 3001; // ƒê·∫∑t c·ªïng server ch·∫°y

// kh·ªüi ƒë·ªông server N·∫øu kh√¥ng c√≥ d√≤ng n√†y, server kh√¥ng ch·∫°y ƒë∆∞·ª£c. N√≥ b·∫£o Express: ‚ÄúNghe c√°c y√™u c·∫ßu ·ªü c·ªïng 8080 nh√©.‚Äù
// app.listen(PORT, () => {
//     console.log(`Server ƒëang ch·∫°y t·∫°i http://localhost:${PORT}`);
// });

// ===== B∆Ø·ªöC 4: CH·∫†Y SERVER =====
app.listen(PORT, () => {
    console.log(`‚úÖ Server ƒëang ch·∫°y t·∫°i http://localhost:${PORT}`);
});

